export class SlackModel {
  constructor(
    public app_id: string,
    public enterprise_id: string | null,
    public enterprise_name: string | null,
    public enterprise_url: string | null,
    public team_id: string,
    public team_name: string,
    public bot_token: string,
    public bot_id: string,
    public bot_user_id: string,
    public bot_scopes: string[],
    public bot_refresh_token: string | null,
    public bot_token_expires_at: string | null,
    public user_id: string,
    public user_token: string | null,
    public user_scopes: string | null,
    public user_refresh_token: string | null,
    public user_token_expires_at: string | null,
    public incoming_webhook_url: string,
    public incoming_webhook_channel: string,
    public incoming_webhook_channel_id: string,
    public incoming_webhook_configuration_url: string,
    public is_enterprise_install: boolean,
    public token_type: string,
    public installed_at: number,
    public custom_values: Record<string, string>
  ) {}
}

export const collection = 'slack';

export const converter: FirebaseFirestore.FirestoreDataConverter<SlackModel> = {
  toFirestore(model: SlackModel): FirebaseFirestore.DocumentData {
    return {
      app_id: model.app_id,
      enterprise_id: model.enterprise_id,
      enterprise_name: model.enterprise_name,
      enterprise_url: model.enterprise_url,
      team_id: model.team_id,
      team_name: model.team_name,
      bot_token: model.bot_token,
      bot_id: model.bot_id,
      bot_user_id: model.bot_user_id,
      bot_scopes: model.bot_scopes,
      bot_refresh_token: model.bot_refresh_token,
      bot_token_expires_at: model.bot_token_expires_at,
      user_id: model.user_id,
      user_token: model.user_token,
      user_scopes: model.user_scopes,
      user_refresh_token: model.user_refresh_token,
      user_token_expires_at: model.user_token_expires_at,
      incoming_webhook_url: model.incoming_webhook_url,
      incoming_webhook_channel: model.incoming_webhook_channel,
      incoming_webhook_channel_id: model.incoming_webhook_channel_id,
      incoming_webhook_configuration_url:
        model.incoming_webhook_configuration_url,
      is_enterprise_install: model.is_enterprise_install,
      token_type: model.token_type,
      installed_at: model.installed_at,
      custom_values: model.custom_values,
    };
  },

  fromFirestore(snapshot: FirebaseFirestore.QueryDocumentSnapshot) {
    const {
      app_id,
      enterprise_id,
      enterprise_name,
      enterprise_url,
      team_id,
      team_name,
      bot_token,
      bot_id,
      bot_user_id,
      bot_scopes,
      bot_refresh_token,
      bot_token_expires_at,
      user_id,
      user_token,
      user_scopes,
      user_refresh_token,
      user_token_expires_at,
      incoming_webhook_url,
      incoming_webhook_channel,
      incoming_webhook_channel_id,
      incoming_webhook_configuration_url,
      is_enterprise_install,
      token_type,
      installed_at,
      custom_values,
    } = snapshot.data();

    return new SlackModel(
      app_id,
      enterprise_id,
      enterprise_name,
      enterprise_url,
      team_id,
      team_name,
      bot_token,
      bot_id,
      bot_user_id,
      bot_scopes,
      bot_refresh_token,
      bot_token_expires_at,
      user_id,
      user_token,
      user_scopes,
      user_refresh_token,
      user_token_expires_at,
      incoming_webhook_url,
      incoming_webhook_channel,
      incoming_webhook_channel_id,
      incoming_webhook_configuration_url,
      is_enterprise_install,
      token_type,
      installed_at,
      custom_values
    );
  },
};
